/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dreamflyer.struts.action.users;

import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.upload.FormFile;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.dreamflyer.hibernate.HibernateSessionFactory;
import com.dreamflyer.struts.form.users.StudentRegisterForm;
import com.dreamflyer.user.SjtuStudent;
import com.dreamflyer.user.Student;

/** 
 * MyEclipse Struts
 * Creation date: 12-20-2008
 * 
 * XDoclet definition:
 * @struts.action path="/studentRegister" name="studentRegisterForm" input="/student_registry.jsp" scope="request" validate="true"
 */
public class StudentRegisterAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StudentRegisterForm studentRegisterForm = (StudentRegisterForm) form;// TODO Auto-generated method stub
		String password = studentRegisterForm.getPassword();
		String confirmPassword = studentRegisterForm.getConfirmpassword();
		String address = studentRegisterForm.getAddress();
		String email = studentRegisterForm.getEmail();
		String telephone = studentRegisterForm.getTelephone();
		String description = studentRegisterForm.getDescription();
		FormFile photo;
		boolean check = false;
		photo = studentRegisterForm.getPhoto();
		
		if(photo != null)
			System.out.print("\tnot null\t");
		
		try{
					
			if("".equals(password))
			{
				System.out.println("No password!");
				check = true;
			}
			if("".equals(confirmPassword))
			{
				System.out.println("No confirmpassword!");
				check = true;
			}
			if(!password.equals(confirmPassword))
			{
				System.out.println("Password and confirmPassword not match!");
				return mapping.findForward("studentreg_success");
			}
			
			if(check) return mapping.findForward("studentreg_fail");
			
			Student student = new Student();
			HttpSession session = request.getSession();
			SjtuStudent cur_user = (SjtuStudent)session.getAttribute("current_user");
			
			student.setPassword(password);
			if("".equals(address))
			{
				String saddress = cur_user.getAddress();
				if(!"".equals(saddress)) student.setAddress(saddress); 
			}else{
				student.setAddress(address);
			}
			if("".equals(email))
			{
				String semail = cur_user.getEmail();
				if(!"".equals(semail)) student.setEmail(semail);
			}else{
				student.setEmail(email);
			}
			if("".equals(telephone))
			{
				String stelephone = cur_user.getTelephone();
				if(!"".equals(stelephone)) student.setTelephone(stelephone);
			}else{
				student.setTelephone(telephone);
			}
			if(!"".equals(description)) student.setDescription(description);
			student.setId(cur_user.getStudentId());
			student.setName(cur_user.getName());
			student.setMajor(cur_user.getMajor());
			student.setUsername(cur_user.getStudentId());
			student.setSex(cur_user.getSex().toString());
			student.setGrade(cur_user.getGrade());
			student.setCollege(cur_user.getCollege());
			student.setPhoto("0");
			
			
			Session ses = HibernateSessionFactory.getSession();
			Transaction tx = ses.beginTransaction();
			
			System.out.println("Saving new records");
			
			
			if(photo != null && !photo.getFileName().equals(""))
			{
				String fileName = photo.getFileName();
				String subName[] = fileName.split("\\.");
				String postfix = subName[subName.length - 1];
				if(!(postfix.toLowerCase().equalsIgnoreCase("jpg")) && !(postfix.toLowerCase().equalsIgnoreCase("jpeg"))
						&& !(postfix.toLowerCase().equalsIgnoreCase("gif")) && !(postfix.toLowerCase().equalsIgnoreCase("bmp")) 
						&& !(postfix.toLowerCase().equalsIgnoreCase("png")) )
				{
					ses.save(student);
					tx.commit();
					ses.clear();
					ses.close();
					return mapping.findForward("studentreg_success");
				}
				try{
					InputStream streamIn = null;
					OutputStream streamOut = null;
					streamIn = photo.getInputStream();
					String dir = servlet.getServletContext().getRealPath("/photo/");
					streamOut = new FileOutputStream(dir+"/"+student.getId()+"."+"jpg");
					int bytesRead = 0;
					byte[] buffer = new byte[5120];
				
				    //Start writing photo
					while((bytesRead = streamIn.read(buffer,0,5120)) != -1)
					{
						streamOut.write(buffer, 0, bytesRead);
					}
				
					streamOut.close();
					streamIn.close();
					student.setPhoto(cur_user.getStudentId());
					ses.save(student);
				}catch(Exception e){
					e.printStackTrace();
					photo.destroy();
					ses.save(student);
					tx.commit();
					ses.clear();
					ses.close();
					return mapping.findForward("studentreg_fail");
					
				}
			}
			
			ses.save(student);
			tx.commit();
			ses.clear();
			ses.close();
			photo.destroy();
		
			System.out.print("Saving finished.");
			
			if(cur_user != null){
				session.removeAttribute("current_user");
			}
			session.invalidate();
			
			return mapping.findForward("studentreg_success");
		
		}catch(Exception e){
			e.printStackTrace();
			return mapping.findForward("studentreg_fail");
		}
	}
}